<?php

namespace Drupal\ja_jquery_examples\Form;


use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\InvokeCommand;
use Drupal\Core\Ajax\OpenModalDialogCommand;
use Drupal\Core\Ajax\ReplaceCommand;
use Drupal\Core\Form\FormBase;
use Drupal\Core\Form\FormStateInterface;

/*
 * Drupal | Formularios
 *
 * Drupal generará automaticamente un ID para todos los elemenetos del formulario
 * y siempre puede ver la salida renderizada para averiguar que ID ha creado Drupal.
 * Sin embargo, esto no está preparado para el futuro y Drupal puede, por cualquier
 * razón, cambiar la IDENTIFICACIÓN y su devolución de llamada no funcionará.
 * Para superar eso, se ha utilizado el elemento de representación '#attributes'
 * para proporcionar un ID HTML específico.
 */

class SimpleAjaxForm extends FormBase {

  public function getFormId() {
    return 'simple_ajax_form';
  }

  public function buildForm(array $form, FormStateInterface $form_state) {

    // elemento de tipo select.

    $form['example_select'] = [
      '#type' => 'select',
      '#title' => $this->t('Select element'),
      '#options' => [
        '1' => $this->t('One'),
        '2' => $this->t('Two'),
        '3' => $this->t('Three'),
        '4' => $this->t('From New York to Ger-ma-ny!'),
      ],
      '#ajax' => [
        'callback' => '::myAjaxCallbackCustom',
        'disable-refocus' => FALSE,
        'event' => 'change',
        'wrapper' => 'edit-output',
        'progress' => [
          'type' => 'throbber',
          'message' => $this->t('Verifyng entry...'),
        ],
      ],
    ];

    // caja de texto donde se va a mostrar lo seleccionado
    $form['output'] = [
      '#type' => 'textfield',
      '#size' => 60,
      '#disabled' => TRUE,
      '#value' => 'Hello, Drupal!!',
      '#prefix' => '<div id="edit-output">',
      '#suffix' => '</div>',
    ];

    // submit button
    $form['subimit'] = [
      '#type' => 'submit',
      '#value' => $this->t('Submit'),
    ];

    return $form;
  }

  /*
   * Matriz renderizado
   */
  public function myAjaxCallback(array &$form, FormStateInterface $form_state) {

    // preparando nuestro textfield. verificando que el campo tiene una
    // opcion seleccionada o el indice de seleccion
    if ($selectedValue = $form_state->getValue('example_select')) {
      // obteniendo el texto de la opcion seleccionada.
      $selectedText = $form['example_select']['#options'][$selectedValue];
      // Coloca el texto de la opción seleccionada en nuestro campo de texto.
      $form['output']['#value'] = $selectedText;
    }
    return $form['output'];
  }

  /*
   * Marcado HTML
   */
  public function myAjaxCallbackHtml(array &$form, FormStateInterface $form_state) {

    $markup = 'nothing selected';

    if ($selectedValue = $form_state->getValue('example_select')) {
      $selectedText = $form['example_select']['#options'][$selectedValue];
      $markup = "<h1>$selectedText</h1>";
    }

    $output = "<div id='edit-output'>$markup</div>";

    return ['#markup' => $output];
  }

  /*
   * Marcado AjaxResponse
   */
  public function myAjaxCallbackResponse(array &$form, FormStateInterface $form_state) {

    $markup = 'nothing selected';

    if ($selectedValue = $form_state->getValue('example_select')) {
      $selectedText = $form['example_select']['#options'][$selectedValue];
    }

    $text = $selectedText ?? $markup;

    $elem = [
      '#type' => 'textfield',
      '#size' => '60',
      '#disabled' => TRUE,
      '#value' => "I am a new textfield: $text!",
      '#attributes' => [
        'id' => ['edit-output'],
      ],
    ];

    $dialogText['#attached']['library'][] = 'core/drupal.dialog.ajax';
    $dialogText['#markup'] = "You selected: $text";

    $response = new AjaxResponse();

    $response->addCommand(new ReplaceCommand('#edit-output', $elem));
    // Show the dialog box.
    $response->addCommand(new OpenModalDialogCommand('My Modal title', $dialogText, ['width' => '300']));

    // Finally return the AjaxResponse object.
    return $response;

  }

  /**
   * An Ajax callback custom.
   */
  public function myAjaxCallbackCustom(array &$form, FormStateInterface $form_state) {
    $response = new AjaxResponse();
    $response->addCommand(new InvokeCommand(NULL, 'myAjaxCallback', ['This is the new text!']));
    //dpm($response);
    kint($response);
    return $response;
  }


  public function validateForm(array &$form, FormStateInterface $form_state) {
    parent::validateForm($form, $form_state); // TODO: Change the autogenerated stub
  }

  public function submitForm(array &$form, FormStateInterface $form_state) {
    //Display result.
    foreach ($form_state->getValues() as $key => $value) {
      \Drupal::messenger()->addStatus($key . ': ' . $value);
    }
  }

}

